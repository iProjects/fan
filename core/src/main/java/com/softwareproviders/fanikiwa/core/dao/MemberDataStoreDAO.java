package com.softwareproviders.fanikiwa.core.dao;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory; 
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Transaction;
import com.softwareproviders.fanikiwa.core.entity.Member;

public class MemberDataStoreDAO implements IMemberDAO{
  
	public Member addMember(Member member) throws Exception
	{
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
  
//		Transaction txn = datastore.beginTransaction();
	
		Entity aMember = new Entity("Member"); //appengine will assign an autogenerated key to this member
		aMember.setProperty("CurrentAccountId", member.getCurrentAccountId());
		aMember.setProperty("CustomerId", member.getCustomerId());
		aMember.setProperty("DateActivated", member.getDateActivated());
		aMember.setProperty("DateJoined", member.getDateJoined());
		aMember.setProperty("DateOfBirth", member.getDateOfBirth());
		aMember.setProperty("Email", member.getEmail());
		aMember.setProperty("Gender", member.getGender());
		aMember.setProperty("InformBy", member.getInformBy());
		aMember.setProperty("InvestmentAccountId", member.getInvestmentAccountId());
		aMember.setProperty("LoanAccountId", member.getLoanAccountId());
		aMember.setProperty("MaxRecordsToDisplay", member.getMaxRecordsToDisplay());
		aMember.setProperty("NationalID", member.getNationalID());
		aMember.setProperty("OtherNames", member.getOtherNames());
		aMember.setProperty("Photo", member.getPhoto());
		aMember.setProperty("Pwd", member.getPwd());
		aMember.setProperty("RefferedBy", member.getRefferedBy());
		aMember.setProperty("Status", member.getStatus());
		aMember.setProperty("Surname", member.getSurname());
		aMember.setProperty("Telephone", member.getTelephone()); 
		datastore.put(aMember);

//		txn.commit();
		
		return member;
	}

	public List<Member> getMembers()
	{
		List<Member> members=new ArrayList<Member>();
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService(); 
	    // Run an ancestor query to ensure we see the most up-to-date
	    // view of the Greetings belonging to the selected Guestbook.
	    Query query = new Query("Member");
	    List<Entity> returnedmembers = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(10));
	    
	    for (Entity member : returnedmembers) {
	    	Member aMember = new Member();  
			aMember.setCurrentAccountId((int) member.getProperty("CurrentAccountId"));
			aMember.setCustomerId((int) member.getProperty("CustomerId"));
			aMember.setDateActivated((Date) member.getProperty("DateActivated"));
			aMember.setDateJoined((Date) member.getProperty("DateJoined"));
			aMember.setDateOfBirth((Date) member.getProperty("DateOfBirth"));
			aMember.setEmail((String) member.getProperty("Email"));
			aMember.setGender((String) member.getProperty("Gender"));
			aMember.setInformBy((String) member.getProperty("InformBy"));
			aMember.setInvestmentAccountId((int) member.getProperty("InvestmentAccountId"));
			aMember.setLoanAccountId((int) member.getProperty("LoanAccountId"));
			aMember.setMaxRecordsToDisplay((int) member.getProperty("MaxRecordsToDisplay"));
			aMember.setNationalID((String) member.getProperty("NationalID"));
			aMember.setOtherNames((String) member.getProperty("OtherNames"));
			aMember.setPhoto((String) member.getProperty("Photo"));
			aMember.setPwd((String) member.getProperty("Pwd"));
			aMember.setRefferedBy((int) member.getProperty("RefferedBy"));
			aMember.setStatus((String) member.getProperty("Status"));
			aMember.setSurname((String) member.getProperty("Surname"));
			aMember.setTelephone((String) member.getProperty("Telephone")); 

	    	  members.add(aMember);
	    	}
	    
		return members;
	}
}
